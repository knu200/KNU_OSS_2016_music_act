package musicT;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;

public class Music implements Runnable{
	static File file;
	static SourceDataLine mLine =null;
	static AudioInputStream ais = null;
	static AudioFormat audioFormat =null;
	static DataLine.Info info;
	static File directory = new File(".");
	static int bufferSize = 0;
	static byte[] buffer;
	static int bytesRead = 0;
	String pathString;
	Path path = Paths.get("music.mp3");
	@Override
	public void run(){
		try{
			file = new File("./musicT/music.mp3");
			ais = AudioSystem.getAudioInputStream(file);
			audioFormat = ais.getFormat();
			if(audioFormat.getEncoding()!=
					AudioFormat.Encoding.PCM_SIGNED){
				AudioFormat newFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,
						audioFormat.getSampleRate(),
						16,
						audioFormat.getChannels(),
						audioFormat.getChannels()*2,
						audioFormat.getSampleRate(),
						false);
				System.out.println("Converting audio format to"
						+newFormat);
				AudioInputStream newStream = AudioSystem.getAudioInputStream(newFormat,ais);
				audioFormat = newFormat;
				ais = newStream;
			}
			info = new DataLine.Info(SourceDataLine.class,audioFormat);
			mLine = (SourceDataLine) AudioSystem.getLine(info);
			mLine.open(audioFormat,mLine.getBufferSize());
			mLine.start();
			bufferSize = (int)audioFormat.getSampleRate()*audioFormat.getFrameSize();
			buffer = new byte[bufferSize];
			bytesRead = 0;
			while(bytesRead >= 0){
				bytesRead = ais.read(buffer,0,buffer.length);
				if(bytesRead >= 0){
					mLine.write(buffer, 0, bytesRead);
				}
				if(Drive.stop == true){
					break;
				}
			}
			mLine.drain();
			mLine.close();
		}catch(Exception e){
			e.printStackTrace();
	}
	}
	public void stop(){
		mLine.stop();
	}
	public void musicClose(){
		mLine.close();
	}
}
